local _, ns = ...
---@class NAG
local NAG = LibStub("AceAddon-3.0"):GetAddon("NAG")
local L = LibStub("AceLocale-3.0"):GetLocale("NAG", true)
local AceGUI = LibStub("AceGUI-3.0")

-- Default settings for the module
local defaults = {
    global = {
        searchText = "",
        previewSize = 32,
        selectedCategory = "ALL"
    }
}

---@class AtlasUtil : ModuleBase
local AtlasUtil = NAG:CreateModule("AtlasUtil", defaults, {
    moduleType = ns.MODULE_TYPES.CORE,
    debug = true,
    hidden = NAG:IsDebugEnabled(),
    optionsCategory = ns.MODULE_CATEGORIES.DEBUG,
    defaultState = {
        categories = {},
        filteredAtlases = {},
        onSelectCallback = nil,
        frame = nil
    }
})

function AtlasUtil:ModuleInitialize()
    self:Debug("Initializing AtlasUtil")
    self:InitializeState()
    self:BuildCategories()
end

function AtlasUtil:BuildCategories()
    -- Clear existing categories
    wipe(self.state.categories)

    -- Add ALL category
    self.state.categories["ALL"] = {}

    if ns.AtlasInfo then
        -- First pass: collect categories
        for categoryPath in pairs(ns.AtlasInfo) do
            if type(categoryPath) == "string" and categoryPath:match("^Interface/") then
                -- Get the second level of the path (e.g., "Interface/Garrison" -> "Garrison")
                local category = categoryPath:match("^Interface/([^/]+)")
                if category then
                    if not self.state.categories[category] then
                        self.state.categories[category] = {}
                    end
                    -- Store the full path in the category
                    self.state.categories[category][categoryPath] = true
                end
            end
        end
    end
end

function AtlasUtil:GetAtlasesForCategory(category, searchText)
    local results = {}
    searchText = searchText and strlower(searchText) or ""

    if ns.AtlasInfo then
        if category == "ALL" then
            -- Search all categories
            for categoryPath, categoryTable in pairs(ns.AtlasInfo) do
                if type(categoryTable) == "table" and categoryPath:match("^Interface/") then
                    for atlasName, atlasInfo in pairs(categoryTable) do
                        if type(atlasInfo) == "table" and #atlasInfo >= 6 then
                            if searchText == "" or strlower(atlasName):find(searchText, 1, true) then
                                tinsert(results, {
                                    path = categoryPath,
                                    name = atlasName,
                                    info = atlasInfo,
                                    fullPath = categoryPath .. "/" .. atlasName
                                })
                            end
                        end
                    end
                end
            end
        else
            -- Search specific category
            for categoryPath in pairs(self.state.categories[category]) do
                local categoryTable = ns.AtlasInfo[categoryPath]
                if categoryTable then
                    for atlasName, atlasInfo in pairs(categoryTable) do
                        if type(atlasInfo) == "table" and #atlasInfo >= 6 then
                            if searchText == "" or strlower(atlasName):find(searchText, 1, true) then
                                tinsert(results, {
                                    path = categoryPath,
                                    name = atlasName,
                                    info = atlasInfo,
                                    fullPath = categoryPath .. "/" .. atlasName
                                })
                            end
                        end
                    end
                end
            end
        end
    end

    -- Sort results by name
    table.sort(results, function(a, b) return a.name < b.name end)
    return results
end

function AtlasUtil:GetAtlasInfo(atlasName)
    if not atlasName then return nil end

    -- Try to get info from C_Texture API first
    local info = C_Texture.GetAtlasInfo(atlasName)
    if info then
        return {
            info.width,
            info.height,
            info.leftTexCoord,
            info.rightTexCoord,
            info.topTexCoord,
            info.bottomTexCoord,
            info.filename
        }
    end

    -- Fallback to CataAtlasInfo if available
    if self.state and self.state.cachedAtlases then
        return self.state.cachedAtlases[atlasName]
    end

    return nil
end

function AtlasUtil:CreateBrowseFrame(callback)
    if not self.state then
        self:InitializeState()
    end

    -- Store callback
    self.state.onSelectCallback = callback

    -- If frame exists, just show it
    if self.state.frame then
        self.state.frame:Show()
        return
    end

    -- Create main frame
    local frame = AceGUI:Create("Frame")
    frame:SetTitle(L["atlasBrowser"] or "Atlas Browser")
    frame:SetLayout("Flow")
    frame:SetWidth(800)
    frame:SetHeight(600)
    frame:EnableResize(false)

    -- Create category dropdown
    local categoryDropdown = AceGUI:Create("Dropdown")
    categoryDropdown:SetLabel(L["category"] or "Category")
    categoryDropdown:SetWidth(200)

    -- Build category list
    local categories = { ["ALL"] = L["allCategories"] or "All Categories" }
    for category in pairs(self.state.categories) do
        if category ~= "ALL" then
            categories[category] = category
        end
    end
    categoryDropdown:SetList(categories)
    categoryDropdown:SetValue(self:GetGlobal().selectedCategory)
    frame:AddChild(categoryDropdown)

    -- Create search box
    local searchBox = AceGUI:Create("EditBox")
    searchBox:SetLabel(L["search"] or "Search")
    searchBox:SetWidth(200)
    frame:AddChild(searchBox)

    -- Create size slider
    local sizeSlider = AceGUI:Create("Slider")
    sizeSlider:SetLabel(L["previewSize"] or "Preview Size")
    sizeSlider:SetWidth(200)
    sizeSlider:SetValue(self:GetGlobal().previewSize or 32)
    sizeSlider:SetSliderValues(16, 64, 8)
    frame:AddChild(sizeSlider)

    -- Create scroll container
    local scrollContainer = AceGUI:Create("SimpleGroup")
    scrollContainer:SetFullWidth(true)
    scrollContainer:SetFullHeight(true)
    scrollContainer:SetLayout("Fill")
    frame:AddChild(scrollContainer)

    -- Create scroll frame
    local scroll = AceGUI:Create("ScrollFrame")
    scroll:SetLayout("Flow")
    scrollContainer:AddChild(scroll)

    -- Store references
    self.state.frame = frame
    self.state.scroll = scroll
    self.state.searchBox = searchBox
    self.state.sizeSlider = sizeSlider
    self.state.categoryDropdown = categoryDropdown

    -- Set up callbacks
    local function UpdateDisplay()
        local category = categoryDropdown:GetValue()
        local searchText = searchBox:GetText()
        local results = self:GetAtlasesForCategory(category, searchText)
        self:UpdateAtlasDisplay(results)
    end

    categoryDropdown:SetCallback("OnValueChanged", function(_, _, value)
        self:GetGlobal().selectedCategory = value
        UpdateDisplay()
    end)

    searchBox:SetCallback("OnTextChanged", function(_, _, text)
        self:GetGlobal().searchText = text
        UpdateDisplay()
    end)

    sizeSlider:SetCallback("OnValueChanged", function(_, _, value)
        self:GetGlobal().previewSize = value
        UpdateDisplay()
    end)

    -- Set up close callback
    frame:SetCallback("OnClose", function(widget)
        self.state.frame = nil
        AceGUI:Release(widget)
    end)

    -- Initial update
    UpdateDisplay()
end

function AtlasUtil:UpdateAtlasDisplay(atlases)
    if not self.state or not self.state.frame or not self.state.scroll then return end

    local scroll = self.state.scroll
    local iconSize = self:GetGlobal().previewSize or 32

    -- Release all children
    scroll:ReleaseChildren()

    -- Create atlas buttons (limit to 100 per page for performance)
    for i = 1, math.min(100, #atlases) do
        local atlas = atlases[i]
        local button = AceGUI:Create("Frame")
        button:SetWidth(iconSize + 10)
        button:SetHeight(iconSize + 10)

        -- Create texture
        local texture = button.frame:CreateTexture(nil, "ARTWORK")
        texture:SetAllPoints()

        -- Set up the texture using atlas info
        local info = self:GetAtlasInfo(atlas.fullPath)
        if info then
            -- Set the texture using SetAtlas for proper display
            texture:SetAtlas(atlas.fullPath)

            -- Create highlight texture
            local highlight = button.frame:CreateTexture(nil, "HIGHLIGHT")
            highlight:SetAllPoints()
            highlight:SetAtlas(atlas.fullPath)
            highlight:SetBlendMode("ADD")
            highlight:SetAlpha(0.3)

            -- Add a background to make transparent textures more visible
            local bg = button.frame:CreateTexture(nil, "BACKGROUND")
            bg:SetAllPoints()
            bg:SetColorTexture(0.1, 0.1, 0.1, 0.8)
        end

        -- Set up click handler
        button.frame:SetScript("OnMouseDown", function()
            if self.state.onSelectCallback then
                self.state.onSelectCallback(atlas.fullPath)
                self.state.frame:Hide()
            end
        end)

        -- Set up tooltip
        button.frame:SetScript("OnEnter", function()
            GameTooltip:SetOwner(button.frame, "ANCHOR_RIGHT")
            GameTooltip:AddLine(atlas.fullPath)
            if info then
                GameTooltip:AddLine(format("Size: %dx%d", info[1], info[2]), 1, 1, 1)
                GameTooltip:AddLine(format("TexCoord: %.2f, %.2f, %.2f, %.2f",
                    info[3], info[4], info[5], info[6]), 1, 1, 1)
                if info[7] then
                    GameTooltip:AddLine("File: " .. info[7], 1, 1, 1)
                end
            end
            GameTooltip:Show()
        end)
        button.frame:SetScript("OnLeave", function()
            GameTooltip:Hide()
        end)

        -- Enable mouse interaction
        button.frame:EnableMouse(true)

        -- Add to scroll frame
        scroll:AddChild(button)
    end

    -- Add count label
    local countLabel = AceGUI:Create("Label")
    countLabel:SetText(format("Showing %d of %d atlases", math.min(100, #atlases), #atlases))
    countLabel:SetFullWidth(true)
    scroll:AddChild(countLabel)
end

-- Return the module
ns.AtlasUtil = AtlasUtil
